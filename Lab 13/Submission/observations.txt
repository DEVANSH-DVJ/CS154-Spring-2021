**Example 1: ex1.pl**
  Predicates:
    human(Element),
    hascommonsense(Element),
    wise(Element)
  Brief:
    An element is wise if it is human and has common sense
  Why it works:
    A simple conjunction


**Family Relations: grand.pl**
  Predicates:
    child(Element,Element),
    wife(Element,Element),
    grandchild(Element,Element),
    grandparent(Element,Element),
    grandmother(Element,Element),
    granddaughter(Element,Element)
  Brief:
    Trying to mimic family relations
  Error (Logical):
    A is grandchild of B and C is wife of B then A is grandchild of C as well
    We have missed such relations while defining rules
    The granddaughter predicate actually mimics granddaughter-in-law relation
    A lot of changes were required, so I didn't fix it
    Apart from that, due to use of simple conjunction and no infinite looping, we don't get any runtime errors


**List Reversal Original: reverse_orig.pl**
  Predicates:
    last(List,Element),
    reverse(List,List)
  Brief:
    Reversing the list
  Error (A lot of errors):
    First of all, reverse doesn't have a stopping recursion
    Even if we fix that, the head element is lost in the third rule
    I found it difficult to do it using last as a helping predicate, so I switched to append like last lab


**List Reversal Fixed: reverse_fix.pl**
  Predicates:
    app(List,List,List),
    rev(List,List)
  Brief:
    Reversing the list
  Why it works:
    Empty list is reverse of itself
    Reverse of a list is reverse of tail appended with the head element


**kth Element: kth.pl**
  Predicates:
    kthfind(List,Number,Element,Number),
    kth(List,Number,Element)
  Brief:
    Finding the kth element in the list (0-indexed)
  Why it works:
    Increment the counter I till it reaches required position K
    Then break the loop and return the head element (which is kth element in the original list)


**Directed Path: path.pl**
  Predicates:
    connected(Element,Element),
    path(Element,Element)
  Brief:
    Check if there is a directed path from first element to second element
  Why it works:
    There is directed path iff
      either first element is directly connected to the second one, or
      there is an element which is directly connected to first element and has a directed path to second element


**Undirected Connections Original: connected_orig.pl**
  Predicates:
    connected(Element,Element)
  Brief:
    Check if there is an undirected connection between the two elements
  Error (Infinite Loop):
    Happens when both A,B and B,A is false
    A,B calls B,A which calls A,B and so on


**Undirected Connections Fixed: connected_fix.pl**
  Predicates:
    connected(Element,Element)
    isconnected(Element,Element)
  Brief:
    Check if there is an undirected connection between the two elements
  Why it works:
    A,B are connected only if either of A,B or B,A are connected


**Reward Original: reward_orig.pl**
  Predicates:
    btech(Element),
    chessplayer(Element),
    footballplayer(Element),
    athelete(Element),
    sportsperson(Element)
    gatesreward(Element)
  Brief:
    A person is eligible for reward if he/she has done btech and is a sports person
  Error (Repeated responses):
    If we query `gatesreward(X). a`, then we get pinki twice as the output as it makes sportsperson predicate true twice


**Reward Tried Cut: reward_cut.pl**
  Predicates:
    btech(Element),
    chessplayer(Element),
    footballplayer(Element),
    athelete(Element),
    sportsperson(Element)
    gatesreward(Element)
  Brief:
    A person is eligible for reward if he/she has done btech and is a sports person
  Error (Incorrect query response):
    If we query `gatesreward(X). a`, then we get only tikku as cut operator ends the search after finding a person who satisfies gatesreward predicate
    This happened due to improper placement of cut operator


**Reward Fixed: reward_fix.pl**
  Predicates:
    btech(Element),
    chessplayer(Element),
    footballplayer(Element),
    athelete(Element),
    sportsperson(Element)
    gatesreward(Element)
  Brief:
    A person is eligible for reward if he/she has done btech and is a sports person
  Why it works:
    A simple conjunction
    To avoid repeated solutions, while resolving sportsperson predicate, we stop when we get true
